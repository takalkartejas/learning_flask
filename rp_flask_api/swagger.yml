# swagger.yml

openapi: 3.0.0
info:
  title: "RP Flask REST API"
  description: "An API about people and notes"
  version: "1.0.0"

# By providing "/api" as the value of url, you’ll be able to access all of your API paths relative to http://localhost:8000/api.
servers:
  - url: "/api"

paths:
  # /people: The relative URL of your API endpoint
  #URL endpoint that you can access at http://localhost:8000/api/people
  /people:
  #this method gets all people
    get:
    # operationId: The Python function that’ll respond to the request
    #operationId must contain a string. Connexion will use ...
    #"people.read_all" to find a Python function named ...
    #read_all() in a people module of your project.
    # tags: The tags assigned to this endpoint, which allow you to group the operations in the UI
    # summary: The UI display text for this endpoint
    # responses: The status codes that the endpoint responds with

      operationId: "people.read_all"
      tags:
      - "People"
      #the summary can be seen in the swagger docs infront of get /people
      summary: "Read the list of people"
      #the responses can also be seen in docs opening get
      responses:
        "200":
          description: "successfully read people list"
    post:
     # we need to add create() funtion in people.py to execute it
      operationId: "people.create"
      tags:
        - People
      summary: "Create a person"
      # we request body to server
      requestBody:
          description: "Person to create"
          required: True
          content:
          #Inside of content, you define application/json ... 
          #as the data exchange format of your API.
            application/json:
              schema:
                x-body-name: "person"
                $ref: "#/components/schemas/Person"
      responses:
      #Search for mozilla documentation for http respone status codes
        "201":
          description: "Successfully created person"
  # this method gets a person using last name
  /people/{lname}:
    get:
      operationId: "people.read_one"
      tags:
        - People
      summary: "Read one person"
      parameters:
        - $ref: "#/components/parameters/lname"
      responses:
        "200":
          description: "Successfully read person"

components:
  schemas:
    Person:
      type: "object"
      # required indicates which properties are required *
      # this schema will be represented as a dictionary in python code later
      required:
        - lname
      properties:
        fname:
          type: "string"
        lname:
          type: "string"
  parameters:
    lname:
    # the name shows up in the name column in get
      name: "lname"
      description: "Last name of the person to get"
      # it is a path parameter 
      #i.e. we give it in the path of url
      in: path
      required: True
      schema:
        type: "string"
# ...